type InterceptionEvent = Parameters<NonNullable<Interception['modifyResponse']>>[0]['event']

function processJsFile(js: string, event: InterceptionEvent) {
  const url = event.request.url
  const pathname = new URL(url).pathname
  const filename = path.basename(pathname)

  // app.*.js
  if (/^app\.\w+\.js$/.test(filename)) {
    return processAppJs(js)
  }

  // 期望
  if (!/^\d+\.\w+\.js$/i.test(filename)) return js

  // vuex
  // this['commit'] = function(_0xe59d72, _0x31227c, _0x3aa954) {
  //     return _0x5068e8['call'](_0x43325a, _0xe59d72, _0x31227c, _0x3aa954);
  // }

  const matches = Array.from(js.matchAll(/this\['commit'\] *?= *?function\(/g))
  console.log('file: %s, matches', filename, matches)

  if (matches.length) {
    debug('current patch vuex store.commit')
    debugger
  }

  return js
}


import { Page } from 'puppeteer'
import { baseDebug } from '../../common/index'

const debug = baseDebug.extend('utils:anti-spider')

export const HTML_CONTENT_STORAGE_KEY = '__chapterContentHtml__'

export async function hookVuexCommit(page: Page) {
  debug('hookVuexCommit')

  // 注入 $store.commit
  await page.$eval(
    '#app',
    (el: any, htmlContentStorageKey: string) => {
      const original = el.__vue__.$store.commit
      el.__vue__.$store.commit = function (...args: any[]) {
        // action, payload, 第三个参数不知道
        const [action, payload, thirdArg] = args
        console.log('injected vuex.commit: %s %s', action, payload)

        if (action === 'updateReaderContentHtml') {
          globalThis[htmlContentStorageKey] = payload[0]
        }
        return original(...args)
      }
    },
    HTML_CONTENT_STORAGE_KEY
  )
}
